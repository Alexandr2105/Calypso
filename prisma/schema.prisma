generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String             @id @default(uuid())
  login             String
  email             String             @unique
  createdAt         DateTime
  passwordHash      String?
  isDeleted         Boolean
  googleAuthId      String?
  githubAuthId      String?
  accountType       AccountType        @default(Personal)
  emailConfirmation EmailConfirmation?
  userPost          Post[]
  refreshTokenData  RefreshTokenData[]
  userProfile       UserProfile?
  ban               Boolean             @default(false)
  reasonBan         String?
}

model EmailConfirmation {
  userId           String   @id
  confirmationCode String   @unique
  expirationDate   DateTime
  isConfirmed      Boolean  @default(false)
  user             User     @relation(fields: [userId], references: [id])
}

model RefreshTokenData {
  iat        Int
  exp        Int
  deviceId   String   @id
  ip         String
  deviceName String
  userId     String
  dateCreate DateTime
  user       User     @relation(fields: [userId], references: [id])
}

model UserProfile {
  userId         String  @id
  login          String
  firstName      String?
  lastName       String?
  dateOfBirthday String?
  city           String?
  userInfo       String?
  photo          String?
  user           User    @relation(fields: [userId], references: [id])
}

model Post {
  id          String   @id
  userId      String
  description String?
  createdAt   DateTime
  user        User     @relation(fields: [userId], references: [id])
}

model Payments {
  paymentsId             String        @id
  userId                 String
  price                  Int
  paymentSystem          PaymentType
  paymentStatus          PaymentStatus
  createdAt              DateTime
  subscriptionType       AccountType   @default(Business)
  updatedAt              DateTime?
  endDateOfSubscription  DateTime?
  allDataPayment         Json
  allDataPaymentConfirm  Json?
}

model Subscriptions {
  userId                 String        @id
  paymentsId             String        @unique
  dateOfPayments         DateTime?
  endDateOfSubscription  DateTime?
  price                  Int
  subscriptionType       AccountType
  paymentsType           PaymentStatus
  theAmountOfHours       Int
}

model Products {
  idProduct             String  @id()
  nameSubscription      String
  price                 Int
  subscriptionTimeHours Int
  quantity              Int?
}

enum AccountType {
  Personal
  Business
}

enum PaymentStatus {
  Pending
  Success
  Declined
  Canceled
}

enum PaymentType {
  Stripe
  Paypall
}
